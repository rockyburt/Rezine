#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    Update the translations
    ~~~~~~~~~~~~~~~~~~~~~~~

    Update the translations from the POT.

    :copyright: 2008 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
"""
from os import path, listdir, rename
from optparse import OptionParser
from babel import Locale
from babel.messages import Catalog
from babel.messages.pofile import write_po, read_po


domains = ['messages']


def main():
    global parser
    parser = OptionParser(usage='%prog [path]')
    options, args = parser.parse_args()
    if not args:
        print 'Updating core strings'
        root = path.abspath(path.join(path.dirname(__file__),
                                      path.pardir, 'zine', 'i18n'))
    elif len(args) == 1:
        root = path.join(path.abspath(args[0]), 'i18n')
        if not path.isdir(root):
            parser.error('source folder missing')
        print 'Updating', root
    else:
        parser.error('incorrent number of arguments')

    f = file(path.join(root, 'messages.pot'))
    try:
        template = read_po(f)
    finally:
        f.close()

    po_files = []
    for lang in listdir(root):
        for domain in domains:
            filename = path.join(root, lang, domain + '.po')
            if path.exists(filename):
                print 'Updating %r' % lang
                locale = Locale.parse(lang)
                f = file(filename)
                try:
                    catalog = read_po(f, locale=locale, domain=domain)
                finally:
                    f.close()
                catalog.update(template)

                # XXX: this is kinda dangerous, but as we are using a
                # revision control system anyways that shouldn't make
                # too many problems
                f = file(filename, 'w')
                try:
                    write_po(f, catalog, ignore_obsolete=True,
                             include_previous=False)
                finally:
                    f.close()


    print 'All done.'


if __name__ == '__main__':
    main()
