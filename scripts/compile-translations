#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    Compile translations
    ~~~~~~~~~~~~~~~~~~~~

    Compile translations into pickles containing the translated messages.
    We do not use standard MO files because we have to store additional
    information in those files.

    :copyright: 2008 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
"""
import pickle
from os import listdir, path
from optparse import OptionParser
from babel.messages.pofile import read_po

domains = ['messages']


def is_untranslated(obj):
    if not obj:
        return True
    elif isinstance(obj, basestring):
        return not obj.strip()
    for translation in obj:
        if translation.strip():
            return True
    return False


def main():
    parser = OptionParser(usage='%prog [path]')
    options, args = parser.parse_args()
    if not args:
        print 'Compiling builtin languages'
        root = path.abspath(path.join(path.dirname(__file__),
                                      path.pardir, 'zine', 'i18n'))
    elif len(args) == 1:
        root = path.join(path.abspath(args[0]), 'i18n')
        if not path.isdir(root):
            parser.error('i18n folder missing')
        print 'Compiling', root
    else:
        parser.error('incorrent number of arguments')

    for domain in domains:
        for lang in listdir(root):
            folder = path.join(root, lang)
            translations = path.join(folder, domain + '.po')
            if path.isfile(translations):
                print 'Compiling %r' % lang
                f = file(translations)
                try:
                    catalog = read_po(f, locale=lang)
                finally:
                    f.close()
                rv = dict(messages={}, plural=catalog.plural_expr,
                          client_keys=set())
                for message in catalog:
                    if message.id:
                        i = message.id
                        if isinstance(i, (list, tuple)):
                            i = i[0]
                        s = message.string
                        if isinstance(s, list):
                            s = tuple(s)
                        if is_untranslated(s):
                            continue
                        rv['messages'][i] = s
                        for filename, lineno in message.locations:
                            if filename.endswith('.js'):
                                rv['client_keys'].add(i)
                                break
                f = file(path.join(folder, domain + '.catalog'), 'wb')
                try:
                    pickle.dump(rv, f, protocol=2)
                finally:
                    f.close()
    print 'All done.'


if __name__ == '__main__':
    main()
